'''
Unit test functions.
Configuration file needs to be 
QUAL = 1
FILTER = PASS
'''
import sys
import pytest
sys.path.insert(0,'../Application/')
from classes.read_file import ReadFile
from classes import log 
#from classes.main import Cnv_classifier
from classes.filter import Filter
from classes.annotation import Annotation
from classes.add_metrics import LoeufMetrics
from classes.automated_testing import *
from classes.control_sample import *
from classes.link import OrganizateData
from classes.short_variants import *
from classes.data_presentation import ImproventData

@pytest.fixture()
def file_to_test():
    '''Set up the test envronment - load the test data'''
    file_to_test = '/re_gecip/machine_learning/LOEUF_classifier_tool/test/manually_created_VCF/CONTROL-DNA_A09.SV.vcf.gz'
    return file_to_test

def test_log_file_created():
    '''Check log files exists ''' 
    log.write_statistics_file()
    log_file = '/re_gecip/machine_learning/Manuel/LOEUF_tool/Data_output/log.txt'
    assert os.path.exists(log_file) == True

def test_statistic_file_created():
    '''Check statistic files exists''' 
    log.write_statistics_file()
    statistics = '/re_gecip/machine_learning/Manuel/LOEUF_tool/Data_output/statistics.csv'
    assert os.path.exists(statistics) == True

def test_data_loaded(file_to_test):
    '''Check data loaded is correct'''

    # Call the function
    data = ReadFile(file_to_test)
    data_loaded = data.load_data()

    # Check shape, columns names , values first and last columns values.
    # We check dtype of the two numeric colums
    
    # When a test function have more than one assert, 
    # This is a pathonic way to do this
    rule = [data_loaded.shape == (7,10),
            list(data_loaded.columns) == ['CHROM','POS','ID','REF','ALT','QUAL','FILTER','INFO','FORMAT','CONTROL-DNA_A09'],
            data_loaded['CHROM'].tolist() == ['chr1','chr2','chr3','chr4','chr5','chrY','chrX'],
            data_loaded['CONTROL-DNA_A09'].tolist() == ['0:2:0','146:17:3','144:21:3:2','217:8:4:2','217:8:4:2','332:12:7','40:14:1'],
            data_loaded['POS'].dtypes == 'int64',
            data_loaded['QUAL'].dtypes == 'int64']
    assert all(rule)
    # To run a test inside another running test, I add all fixtures to the latter
    return data_loaded

def test_filtering_process(file_to_test):
    '''
    This function filter CNVs and does some data management
    so we check here that 2 variants were not selected
    the filtered CNVs are 2 LOSS and 3 GAIN, we check that

    Check shape, columns names and values first and last columns values
    START and END came from ID which dtype is object
    let check that we have string and not numeric values
    Until the end we dont do calculation so better to keep them as string
    we will test later if the convertion string to numeric is ok.
    We need to ensure that we are taken the righ coordinates
    '''
    
    data_loaded = test_data_loaded(file_to_test)
    cnv_df = Filter(data_loaded)
    cnv_df = cnv_df.filter_vcf_return_cnv()


    rule = [cnv_df.shape == (5,9),
                list(cnv_df.columns) == ['CNV_ID', '#CHROM', 'REF', 'ALT', 'QUAL', 'FILTER', 'CNV_TYPE', 'START','END'],
                cnv_df['#CHROM'].tolist() == ['chr1','chr2','chr3','chr5','chrX'],
                cnv_df['CNV_TYPE'].tolist() == ['LOSS-2', 'LOSS-2', 'GAIN-30', 'GAIN-30', 'GAIN-30'],
                cnv_df['START'].dtypes == 'object',
                cnv_df['END'].dtypes == 'object',
                cnv_df['START'].tolist() == ['4064526','237966940','48847828','43707305','17728776'],
                cnv_df['END'].tolist() == ['4066838','237966956','48847850','44309420','17728777'],
                ]
    assert all(rule)
    return cnv_df
    

def test_gen_annotation(file_to_test):
    '''
    There is two functions that do annotation at this point 
    of the process. First annotate genes and trancrsipt, second annotate exons.
    The approach is the same in both. A bed file is created to use bedtools
    and see where our CNVs overlap. For clarity we test here the first annotation
    we check fed file created as we would expect, the output generated by bedtools, the data loaded
    and the data manipulation we do to accomodate the result in the workflow.
    the following test do the same for exons and transcripts annotation.
    '''
    cnv_df = test_filtering_process(file_to_test)
    cnv_mapped_genes = Annotation(cnv_df)
    cnv_mapped_genes = cnv_mapped_genes.gene_annotation_bedtools()

    # Check file exists
    cnvs_to_annotate_genes = '/re_gecip/machine_learning/LOEUF_classifier_tool/Data_output/tmp/cnvs_to_annotate_genes.bed'
    assert os.path.exists(cnvs_to_annotate_genes)
    # Check the first and the last line are what we would expect
    with open (cnvs_to_annotate_genes) as f:
        first_line = f.readlines()[0]

    with open (cnvs_to_annotate_genes) as f:
        last_line = f.readlines()[5]

    assert first_line == '#CHROM\tSTART\tEND\tCNV_TYPE\tCNV_ID\n'
    assert last_line == 'chrX\t17728776\t17728777\tGAIN-30\tCONTROL-DNA_A09|Canvas:GAIN:chrX:17728776:17728777|30|PASS|RC:BC:CN|40:14:1\n'


    
   




'''

 # Bedtools put the results in a new bed file, we check this too

    cnv_mapped_genes = '/re_gecip/machine_learning/Manuel/LOEUF_tool/Data_output/tmp/cnv_mapped_genes.bed'
    assert os.path.exists(cnvs_to_annotate_genes)
    # Check the first and the last line are what we would expect
    with open (cnvs_to_annotate_genes) as f:
        first_line_after = f.readline()[0]
        last_line_after = f.readline()[-1]

    
            first_line_after == 'chr1	4064526	4066838	LOSS	CONTROL-DNA_A09|Canvas:LOSS:chr1:4064526:4066838|2|q10;CLT10kb|RC:BC:CN|0:2:0	.	-1	-1	.	-1	.	.	0',
            last_line_after == 'chrX	17728776	17728777	GAIN	CONTROL-DNA_A09|Canvas:GAIN:chrX:17728776:17728777|5|q10|RC:BC:CN|40:14:1	chrX	17635293	17735978	ENST00000398097	False	ENSG00000188158	NHS	1',]

    assert all(rule)

    # Now we check that the bed file created by bedtool has beeb loaded correctly
    # shape now is 9,13 because some of the manually created CNVs overlap with more than one transcrips 
    # or with more than one gene.
    # First CNV does not overlap with any protein coding gene, 
    # Second CNV overlaps with 1 gen and 1 trancript
    # Third, 1 gen 2 trancrsipts so same gen apper twice
    # Fourth 2 genes, 1 transcript in the first and 2 trancripts in the second gen
    # Fifth, 2 trancripts of the same gene but not exons affected
    # I also check the amount overlap, and indirectly we check that dtype is int64

    We can also check that CNV coordinates before and after bedtools analysis remaind the same


    rule = [cnv_mapped_genes.shape == (9,13), 
            cnv_mapped_genes['Gene_name_g'].tolist() == ['NO_GENE_AFFECTED','UBE2F','PRKAR2A','PRKAR2A','NNT','NNT','FGF10','NHS','NHS' ],
            cnv_mapped_genes['amount_overlap_g'].tolist() == [0,1,5,22,91,100,9173,1,1],
            cnv_mapped_genes.START.drop_duplicate() == cnv_df.START,
           ]
    assert all(rule) 
    return cnv_mapped_genes




















#CHROM      START        END CNV_TYPE                                             CNV_ID  ... Transcript_stable_ID_g  canonical_g  Gene_stable_ID_g       Gene_name_g amount_overlap_g
0   chr1    4064526    4066838     LOSS  CONTROL-DNA_A09|Canvas:LOSS:chr1:4064526:40668...  ...       NO_GENE_AFFECTED           -1  NO_GENE_AFFECTED  NO_GENE_AFFECTED                0
1   chr2  237966940  237966956     LOSS  CONTROL-DNA_A09|Canvas:LOSS:chr2:237966940:237...  ...        ENST00000414443        False   ENSG00000184182             UBE2F                1
2   chr3   48847828   48847850     GAIN  CONTROL-DNA_A09|Canvas:GAIN:chr3:48847828:4884...  ...        ENST00000419216        False   ENSG00000114302           PRKAR2A                5
3   chr3   48847828   48847850     GAIN  CONTROL-DNA_A09|Canvas:GAIN:chr3:48847828:4884...  ...        ENST00000265563         True   ENSG00000114302           PRKAR2A               22
4   chr5   43707305   44309420     GAIN  CONTROL-DNA_A09|Canvas:GAIN:chr5:43707305:4430...  ...        ENST00000344920        False   ENSG00000112992               NNT               91
5   chr5   43707305   44309420     GAIN  CONTROL-DNA_A09|Canvas:GAIN:chr5:43707305:4430...  ...        ENST00000264663         True   ENSG00000112992               NNT              100
6   chr5   43707305   44309420     GAIN  CONTROL-DNA_A09|Canvas:GAIN:chr5:43707305:4430...  ...        ENST00000264664         True   ENSG00000070193             FGF10             9173
7   chrX   17728776   17728777     GAIN  CONTROL-DNA_A09|Canvas:GAIN:chrX:17728776:1772...  ...        ENST00000380060         True   ENSG00000188158               NHS                1
8   chrX   17728776   17728777     GAIN  CONTROL-DNA_A09|Canvas:GAIN:chrX:17728776:1772...  ...        ENST00000398097        False   ENSG00000188158               NHS                1

[9 rows x 13 columns]



CHROM              object
POS                 int64
ID                 object
REF                object
ALT                object
QUAL                int64
FILTER             object
INFO               object
FORMAT             object
CONTROL-DNA_A09    object


            vcf_df['CHROM'].astype(str)
            print(vcf_df.dtypes)



CNV_ID #CHROM REF    ALT  QUAL       FILTER CNV_TYPE      START        END
0  CONTROL-DNA_A09|Canvas:LOSS:chr1:4064526:40668...   chr1   N  <CNV>     2  q10;CLT10kb     LOSS    4064526    4066838
1  CONTROL-DNA_A09|Canvas:LOSS:chr2:237966940:237...   chr2   N  <CNV>     2          q10     LOSS  237966940  237966956
2  CONTROL-DNA_A09|Canvas:GAIN:chr3:48847828:4884...   chr3   N  <CNV>     8          q10     GAIN   48847828   48847850
4  CONTROL-DNA_A09|Canvas:GAIN:chr5:43707305:4430...   chr5   N  <CNV>     2          q10     GAIN   43707305   44309420
6  CONTROL-DNA_A09|Canvas:GAIN:chrX:17728776:1772...   chrX   N  <CNV>     5          q10     GAIN   17728776   17728777



def test_readfile():
    user_input = '/re_gecip/machine_learning/Manuel/LOEUF_tool/tests/manually_created_VCF/CONTROL-DNA_A09.SV.vcf.gz'
    data = ReadFile(user_input)
    data_loaded = data.load_data()
    assert data_loaded.shape == (5,10)
'''



