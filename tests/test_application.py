'''
Unit test functions.
Configuration file needs to be 
QUAL = 1
FILTER = PASS
'''
import sys
import pytest
sys.path.insert(0,'../Application/')
from classes.read_file import ReadFile
from classes import log 
#from classes.main import Cnv_classifier
from classes.filter import Filter
from classes.annotation import Annotation
from classes.add_metrics import LoeufMetrics
from classes.automated_testing import *
from classes.control_sample import *
from classes.link import OrganizateData
from classes.short_variants import *
from classes.data_presentation import ImproventData

@pytest.fixture()
def file_to_test():
    '''Set up the test envronment - load the test data'''
    file_to_test = '/re_gecip/machine_learning/LOEUF_classifier_tool/test/manually_created_VCF/CONTROL-DNA_A09.SV.vcf.gz'
    return file_to_test

def test_log_file_created():
    '''Check log files exists ''' 
    log.write_statistics_file()
    log_file = '/re_gecip/machine_learning/Manuel/LOEUF_tool/Data_output/log.txt'
    assert os.path.exists(log_file) == True

def test_statistic_file_created():
    '''Check statistic files exists''' 
    log.write_statistics_file()
    statistics = '/re_gecip/machine_learning/Manuel/LOEUF_tool/Data_output/statistics.csv'
    assert os.path.exists(statistics) == True

def test_data_loaded(file_to_test):
    '''Check data loaded is correct'''

    # Call the function
    data = ReadFile(file_to_test)
    data_loaded = data.load_data()

    # Check shape, columns names , values first and last columns values.
    # We check dtype of the two numeric colums
    
    # When a test function have more than one assert, 
    # This is a pathonic way to do this
    rule = [data_loaded.shape == (7,10),
            list(data_loaded.columns) == ['CHROM','POS','ID','REF','ALT','QUAL','FILTER','INFO','FORMAT','CONTROL-DNA_A09'],
            data_loaded['CHROM'].tolist() == ['chr1','chr2','chr3','chr4','chr5','chrY','chrX'],
            data_loaded['CONTROL-DNA_A09'].tolist() == ['0:2:0','146:17:3','144:21:3:2','217:8:4:2','217:8:4:2','332:12:7','40:14:1'],
            data_loaded['POS'].dtypes == 'int64',
            data_loaded['QUAL'].dtypes == 'int64']
    assert all(rule)
    # To run a test inside another running test, I add all fixtures to the latter
    return data_loaded

def test_filtering_process(file_to_test):
    '''
    This function filter CNVs and does some data management
    so we check here that 2 variants were not selected
    the filtered CNVs are 2 LOSS and 3 GAIN, we check that

    Check shape, columns names and values first and last columns values
    START and END came from ID which dtype is object
    let check that we have string and not numeric values
    Until the end we dont do calculation so better to keep them as string
    we will test later if the convertion string to numeric is ok.
    We need to ensure that we are taken the righ coordinates
    '''
    
    data_loaded = test_data_loaded(file_to_test)
    cnv_df = Filter(data_loaded)
    cnv_df = cnv_df.filter_vcf_return_cnv()


    rule = [cnv_df.shape == (5,9),
                list(cnv_df.columns) == ['CNV_ID', '#CHROM', 'REF', 'ALT', 'QUAL', 'FILTER', 'CNV_TYPE', 'START','END'],
                cnv_df['#CHROM'].tolist() == ['chr1','chr2','chr3','chr5','chrX'],
                cnv_df['CNV_TYPE'].tolist() == ['LOSS-2', 'LOSS-2', 'GAIN-30', 'GAIN-30', 'GAIN-30'],
                cnv_df['START'].dtypes == 'object',
                cnv_df['END'].dtypes == 'object',
                cnv_df['START'].tolist() == ['4064526','237966940','48847828','43707305','17728776'],
                cnv_df['END'].tolist() == ['4066838','237966956','48847850','44309420','17728777'],
                ]
    assert all(rule)
    return cnv_df
    

def test_gen_annotation(file_to_test):
    '''
    There is two functions that do annotation at this point 
    of the process. First annotate genes and trancrsipt, second annotate exons.
    The approach is the same in both. A bed file is created to use bedtools
    and see where our CNVs overlap. For clarity we test here the first annotation
    we check fed file created as we would expect, the output generated by bedtools, the data loaded
    and the data manipulation we do to accomodate the result in the workflow.
    the following test do the same for exons and transcripts annotation.
    '''
    cnv_df = test_filtering_process(file_to_test)
    cnv_mapped_genes = Annotation(cnv_df)
    cnv_mapped_genes = cnv_mapped_genes.gene_annotation_bedtools()

    # Check file exists
    cnvs_to_annotate_genes = '/re_gecip/machine_learning/LOEUF_classifier_tool/Data_output/tmp/cnvs_to_annotate_genes.bed'
    assert os.path.exists(cnvs_to_annotate_genes)
    # Check the first and the last line are what we would expect
    with open (cnvs_to_annotate_genes) as f:
        first_line = f.readlines()[0]

    with open (cnvs_to_annotate_genes) as f:
        last_line = f.readlines()[5]

    assert first_line == '#CHROM\tSTART\tEND\tCNV_TYPE\tCNV_ID\n'
    assert last_line == 'chrX\t17728776\t17728777\tGAIN-30\tCONTROL-DNA_A09|Canvas:GAIN:chrX:17728776:17728777|30|PASS|RC:BC:CN|40:14:1\n'